## Aptos Workspace

Aptos Workspace is an integrated development environment focusing on making it easy and intuitive for people to innovate on Aptos, removing unnecessary obstacles and lowering the bar of entry.

> **_NOTE:_** This is an alpha non production ready version. You can expect breaking changes.

## Overview

Currently, Aptos Workspace acts as a testing environment that provides a framework for Aptos developers to easily run integration tests for their dapps.

Aptos Workspace utilizes [mocha](https://mochajs.org/) as the testing framework and [chai](https://www.chaijs.com/) as the assertion framework.

## Installation

```bash
npm install --save-dev @aptos-labs/workspace
```

Aptos Workspace supports only `.ts` test files and uses TypeScript and ts-node under the hood, so make sure you installed the relevant packages.

```bash
npm install --save-dev ts-node typescript
```

To be able to write your tests in TypeScript, you also need these packages:

```bash
npm install --save-dev chai@4 @types/chai@4 @types/mocha tree-kill
```

### Using pnpm or yarn?

If your project uses `pnpm` or `yarn` you would also need this package. This is because of the nature of `pnpm` and `yarn`. Read more about it [here](https://github.com/aptos-labs/workspace/pull/6)

```
pnpm install --save-dev @aptos-labs/aptos-cli
```

## Quick Start

To get started with Aptos Workspace, open your terminal, cd into your dapp directory, and run the following command:

```bash
npx aptos-workspace init
```

The command will initialize your testing environment by

1. Creating a `tests` folder (will skip this step if already exists) with a `my-first-test.ts` example file
1. Creating a `tsconfig.testing.json` file (will skip this step if already exists) to be used within Workspace

## Write tests

If you have initialized Workspace for the first time, feel free to check out the generated test file `my-first-test.ts`, but overall this is how you will write a test

1. Initialize an `Aptos` client instance configured to use the LOCAL network

```ts
import { AptosConfig, Network, Aptos } from "@aptos-labs/ts-sdk";

const aptosConfig = new AptosConfig({ network: Network.LOCAL });
const aptos = new Aptos(aptosConfig);
```

2. Define a `describe` block with a `before` hook. The `before` block will generate a testing account and publish the Move package to the Aptos network

```ts
import { generateTestAccount, publishPackage } from "@aptos-labs/workspace";
import {
  AptosConfig,
  Network,
  Aptos,
  Ed25519Account,
} from "@aptos-labs/ts-sdk";

let publisherAccount: Ed25519Account;

describe("my first test", () => {
  before(function (done) {
    (async () => {
      publisherAccount = await generateTestAccount();
      await publishPackage({
        publisher: publisherAccount,
        namedAddresses: {
          module_addr: publisherAccount.accountAddress.toString(),
        },
      });
    })().then(done);
  });
});
```

3. Write your test. In the `it` block we fetch the `publisher` account' modules and `expect` it has at least 1 module published to the Aptos network

```ts
import { expect } from "chai";

it("it publishes the contract under the correct address", async () => {
  const accountModules = await aptos.getAccountModules({
    accountAddress: publisherAccount.accountAddress,
  });
  expect(accountModule).to.have.length.at.least(1);
});
```

## Run tests

To your tests with Aptos Workspace, open your terminal, cd into your dapp directory, and run the following command:

```bash
npx aptos-workspace test
```
